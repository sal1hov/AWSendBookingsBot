import asyncio
import email
import email.header
import email.utils
import sys
import logging
from datetime import datetime
from email.utils import getaddresses
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from imapclient import IMAPClient
import os
from dotenv import load_dotenv
from bs4 import BeautifulSoup
import pytz  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

# –ù–∞—Å—Ç—Ä–æ–∏–º logging –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ UTF-8
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s', handlers=[
    logging.StreamHandler(sys.stdout)
])

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_GROUP_ID = int(os.getenv("TELEGRAM_GROUP_ID"))
EMAIL_ACCOUNT = os.getenv("EMAIL_ACCOUNT")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
IMAP_SERVER = os.getenv("IMAP_SERVER")
FILTER_EMAIL = os.getenv("FILTER_EMAIL")  # –û–∂–∏–¥–∞–µ—Ç—Å—è "robot@another-world.com"
SECRET_PASSWORD = os.getenv("SECRET_PASSWORD")

approved_users = set()

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="/status"), KeyboardButton(text="/help")]],
    resize_keyboard=True
)


def decode_header_value(header_value):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω."""
    decoded_fragments = email.header.decode_header(header_value)
    return ''.join([fragment.decode(encoding) if isinstance(fragment, bytes) and encoding else fragment
                    for fragment, encoding in decoded_fragments])


def format_date(date_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–∏—Å—å–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç '–î–î –ú–µ—Å—è—Ü –ì–ì–ì–ì, –ß–ß:–ú–ú' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å —É—á—ë—Ç–æ–º –ú–°–ö."""
    russian_months = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
        7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    try:
        dt = email.utils.parsedate_to_datetime(date_str)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
        msk_tz = pytz.timezone("Europe/Moscow")
        dt = dt.astimezone(msk_tz)

        day = dt.day
        month = russian_months.get(dt.month, str(dt.month))
        year = dt.year
        hour = dt.hour
        minute = dt.minute
        return f"{day:02d} {month} {year}, {hour:02d}:{minute:02d}"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
        return date_str


async def process_folder(mail, folder_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –ø–∏—Å—å–º–∞ –æ—Ç robot@another-world.com."""
    try:
        mail.select_folder(folder_name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏ {folder_name}: {e}")
        return

    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –≤ –ø–∞–ø–∫–µ '{folder_name}'...")
    try:
        messages = mail.search(['UNSEEN'])
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ '{folder_name}': {messages}")
        if messages:
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {folder_name}: {len(messages)}")
            for msg_id in messages:
                msg_data = mail.fetch(msg_id, "RFC822")
                for response_part in msg_data.values():
                    msg = email.message_from_bytes(response_part[b"RFC822"])
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    addresses = getaddresses([msg.get("From", "")])
                    if not any("robot@another-world.com" in addr.lower() for name, addr in addresses):
                        logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–∏—Å—å–º–æ –æ—Ç: {addresses}")
                        continue

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ (HTML-—á–∞—Å—Ç—å)
                    body = ""
                    if msg.is_multipart():
                        for part in msg.walk():
                            if part.get_content_type() == "text/html":
                                body = part.get_payload(decode=True).decode("utf-8", errors="ignore")
                                break
                    else:
                        body = msg.get_payload(decode=True).decode("utf-8", errors="ignore")
                    logging.info(f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Ç–µ–ª–æ –ø–∏—Å—å–º–∞: {body}")

                    # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥–∏ <br> –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
                    body = body.replace("<br>", "\n").replace("<br/>", "\n")
                    soup = BeautifulSoup(body, "html.parser")
                    body_text = soup.get_text(separator="\n")
                    logging.info(f"–¢–µ–∫—Å—Ç –∏–∑ HTML: {body_text}")

                    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ
                    body_lines = [line.strip() for line in body_text.splitlines() if line.strip()]
                    logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ø–∏—Å—å–º–µ: {len(body_lines)}")

                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–ª–µ–π
                    expected_fields = [
                        "–ò–º—è:", "–¢–µ–ª–µ—Ñ–æ–Ω:", "–≠–ª. –ø–æ—á—Ç–∞:", "–î–∞—Ç–∞:", "–í—Ä–µ–º—è:",
                        "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", "–ò–≥—Ä–∞:", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:",
                        "–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:", "–ü—Ä–æ–º–æ–∫–æ–¥:", "–ù—É–∂–Ω–æ –¥–æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞ –∞—Ä–µ–Ω–µ:", "–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
                        "–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ –í–ê–®_–ì–û–†–û–î.another-world.com"
                    ]
                    details_lines = [line for line in body_lines if
                                     any(line.startswith(field) for field in expected_fields)]

                    # –ò—â–µ–º —Ñ—Ä–∞–∑—É –æ –∑–∞—è–≤–∫–µ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ
                    additional_info = ""
                    if "–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" in body_text:
                        additional_info = "–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å —Å–∞–π—Ç–∞ –í–ê–®_–ì–û–†–û–î.another-word.com"
                    elif "–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ –í–ê–®_–ì–û–†–û–î.another-word.com" in body_text:
                        additional_info = "–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ –í–ê–®_–ì–û–†–û–î.another-word.com"

                    if details_lines:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–∏—Å—å–º–∞
                        date_formatted = format_date(msg.get("Date", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
                        text = f"üì© *–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Ä–æ–±–æ—Ç–∞ –∑–∞ {date_formatted}!*\n\n" \
                               f"{additional_info}\n\n" + "\n".join(details_lines) + "\n\n" \
                                                                                     f"üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º!"
                        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ '{folder_name}': {text[:30]}...")
                        await bot.send_message(TELEGRAM_GROUP_ID, text, parse_mode="Markdown")
                        mail.set_flags(msg_id, ["\\Seen"])
                    else:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∏—Å—å–º–∞. –ü–æ–ª–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {body_lines}")
        else:
            logging.info(f"–ù–æ–≤—ã—Ö –ø–∏—Å–µ–º –≤ {folder_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏—Å–µ–º –≤ {folder_name}: {e}")


async def check_mail_loop():
    while True:
        try:
            logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É...")
            with IMAPClient(IMAP_SERVER) as mail:
                mail.login(EMAIL_ACCOUNT, EMAIL_PASSWORD)
                logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                await process_folder(mail, "INBOX")
                await process_folder(mail, "[Gmail]/–°–ø–∞–º")
                await asyncio.sleep(10)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(10)


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ Telegram
@dp.message(Command("start"))
async def start_command(message: types.Message):
    if message.chat.type == "private":
        await message.answer("\U0001F44B –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
    else:
        await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")


@dp.message(Command("status"))
async def status_command(message: types.Message):
    if message.chat.type == "private":
        if message.from_user.id in approved_users:
            await message.answer("\U00002705 –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–æ–≤—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏!", reply_markup=menu)
        else:
            await message.answer("\U0001F512 –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.")
    else:
        await message.answer("\U00002705 –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ.")


@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/status ‚Äì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n/help ‚Äì –ü–æ–º–æ—â—å")


@dp.message()
async def check_password(message: types.Message):
    if message.chat.type == "private":
        if message.text == SECRET_PASSWORD:
            approved_users.add(message.from_user.id)
            await message.answer("\U00002705 –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.",
                                 reply_markup=menu)
        else:
            await message.answer("\U0000274C –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.create_task(check_mail_loop())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
